
import timm
from timm.data.transforms_factory import create_transform
from timm.data import resolve_data_config

import torch
from torch.utils.data import DataLoader

from torchvision.datasets import ImageFolder
from torchvision.transforms import Normalize, Resize, CenterCrop, ToPILImage


def load_model():
    # Load the pre-trained PyTorch model
    model = timm.create_model(
        'hf-hub:nateraw/resnet50-oxford-iiit-pet',
        pretrained=True
    )
    model.eval()
    return model


def load_images(model, data_dir):
    # Define the image transformations

    transform = create_transform(**resolve_data_config(model.pretrained_cfg, model=model))

    # Load the image dataset
    dataset = ImageFolder(data_dir, transform=transform)
    dataloader = DataLoader(dataset, batch_size=32, shuffle=True)

    return dataloader


def inverse_transform(image):
    # inverse transform generated by request from ChatGPT by supplying the print(transform) from below
    inv_normalize = Normalize(
        mean=[-0.485 / 0.229, -0.456 / 0.224, -0.406 / 0.225],
        std=[1 / 0.229, 1 / 0.224, 1 / 0.225]
    )

    image = inv_normalize(image)
    image = ToPILImage()(image)
    image = CenterCrop(size=(235, 235))(image)
    image = Resize(size=(224, 224), interpolation=2)(image)
    return image


def attempt_gpu_acceleration():
    if torch.cuda.is_available():
        device = torch.device("cuda")
        print("CUDA is available. Using CUDA.")
        return device

    if torch.backends.mps.is_available():
        device = torch.device(torch.device("mps"))
        print("MPS is available. Using MPS.")
        return device

    device = torch.device("cpu")
    print("Neither CUDA nor MPS is available. Using CPU.")
    return device
